// <auto-generated />
using System;
using Blog.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Blog.EntityFramework.Migrations
{
    [DbContext(typeof(BloggingContext))]
    [Migration("20200115094712_update1Table5")]
    partial class update1Table5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("blogging")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Blog.EntityFramework.ArticleGenre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnName("genreName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("articleGenre");
                });

            modelBuilder.Entity("Blog.EntityFramework.ArticleRelationShip", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("TipId")
                        .HasColumnType("text");

                    b.Property<string>("ArticlesId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TipsId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("ArticleId", "TipId");

                    b.HasIndex("ArticlesId");

                    b.HasIndex("TipsId");

                    b.ToTable("ArticleRelationShip");
                });

            modelBuilder.Entity("Blog.EntityFramework.Articles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GenreId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Intro")
                        .HasColumnName("intro")
                        .HasColumnType("text");

                    b.Property<string>("IntroImage")
                        .HasColumnName("introImage")
                        .HasColumnType("text");

                    b.Property<bool>("Istop")
                        .HasColumnName("isTop")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("article");
                });

            modelBuilder.Entity("Blog.EntityFramework.Tips", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("TipName")
                        .IsRequired()
                        .HasColumnName("genreName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("tip");
                });

            modelBuilder.Entity("Blog.EntityFramework.ArticleRelationShip", b =>
                {
                    b.HasOne("Blog.EntityFramework.Articles", "Articles")
                        .WithMany("Tips")
                        .HasForeignKey("ArticlesId");

                    b.HasOne("Blog.EntityFramework.Tips", "Tips")
                        .WithMany("Articles")
                        .HasForeignKey("TipsId");
                });

            modelBuilder.Entity("Blog.EntityFramework.Articles", b =>
                {
                    b.HasOne("Blog.EntityFramework.ArticleGenre", "Genre")
                        .WithMany("Articles")
                        .HasForeignKey("GenreId");
                });
#pragma warning restore 612, 618
        }
    }
}
